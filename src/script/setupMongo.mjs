import {MongoClient} from "mongodb";

// Replace the uri string with your MongoDB deployment's connection string.
const uri = "mongodb://localhost:27017";
const client = new MongoClient(uri);
async function run() {
  try {
    const database = client.db("nextjs-demo");
    const users = database.collection("users");
    // create a document to insert
    const doc = {
      name: "fun",
      base64: "",
    }
    const result = await users.insertOne(doc);
    console.log(`A document was inserted with the _id: ${result.insertedId}`);
  } finally {
    await client.close();
  }
}
run().catch(console.dir);
